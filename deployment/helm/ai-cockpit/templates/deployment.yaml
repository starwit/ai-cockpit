apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ai-cockpit.fullname" . }}
  labels:
    {{- include "ai-cockpit.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ai-cockpit.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ai-cockpit.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: check-db-ready
        image: postgres:15.4
        command: ['sh', '-c', 
          'until pg_isready -h {{ include "postgresql.servicename" . }} -p 5432; 
          do echo waiting for database; sleep 2; done;']        
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SERVER_SERVLET_CONTEXT_PATH
              value: {{ .Values.app.context_path | quote }}
            - name: SERVER_PORT
              value: {{ .Values.service.port | quote }}
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://{{ include "postgresql.servicename" . }}:5432/{{ .Values.postgresql.auth.database }}
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.postgresql.auth.username }}
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.secretname" . }}
                  key: password
            - name: MINIO_USER
              value: {{ .Values.minio.user }}
            - name: MINIO_PASSWORD
              value: {{ .Values.minio.password }}
            - name: MINIO_ENDPOINT
              value: {{ .Values.minio.endpoint }}
            - name: SBOM_ENABLED
              value: {{ .Values.sbom.enabled  | quote }}
            - name: SBOM_GENERATOR_URI
              value: {{ .Values.sbom.generator.uri  | quote}}
            {{- if .Values.auth.enabled }}
            - name: SPRING_PROFILES_ACTIVE
              value: auth
            - name: OIDC-CLIENT-REGISTRATION_AUTHORIZATION-URI
              value: {{ .Values.auth.keycloakRealmUrlExternal }}/protocol/openid-connect/auth
            - name: OIDC-CLIENT-REGISTRATION_TOKEN-URI
              value: {{ .Values.auth.keycloakRealmUrlInternal }}/protocol/openid-connect/token
            - name: OIDC-CLIENT-REGISTRATION_USER-INFO-URI
              value: {{ .Values.auth.keycloakRealmUrlInternal }}/protocol/openid-connect/userinfo
            - name: OIDC-CLIENT-REGISTRATION_JWK-SET-URI
              value: {{ .Values.auth.keycloakRealmUrlInternal }}/protocol/openid-connect/certs
            - name: OIDC-CLIENT-REGISTRATION_END-SESSION-ENDPOINT
              value: {{ .Values.auth.keycloakRealmUrlExternal }}/protocol/openid-connect/logout
            - name: OIDC-CLIENT-REGISTRATION_USERNAMEATTRIBUTE
              value: preferred_username
            - name: OIDC-CLIENT-REGISTRATION_SCOPE
              value: openid
            - name: OIDC-CLIENT-REGISTRATION_REDIRECT-URI
              value: "{baseUrl}/login/oauth2/code/{registrationId}"
            - name: OIDC-CLIENT-REGISTRATION_CLIENT-ID
              value: {{ .Values.auth.clientId }}
            - name: OIDC-CLIENT-REGISTRATION_CLIENT-SECRET
              value: {{ .Values.auth.clientSecret }}
            {{- else }}
            - name: SPRING_PROFILES_ACTIVE
              value: default
            {{- end }}
            {{- with .Values.extraEnv }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.app.context_path }}/monitoring/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ .Values.app.context_path }}/monitoring/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
