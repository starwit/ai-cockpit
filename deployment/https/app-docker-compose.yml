version: "3.9"
services:
  ai-cockpit-db:
    container_name: ai-cockpit-db
    image: postgres:latest
    environment:
      POSTGRES_DB: ai-cockpit
      POSTGRES_USER: ai-cockpit
      POSTGRES_PASSWORD: ${DB_PW_ai-cockpit}
      PGDATA: /var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ai-cockpit'] # <<<---
      interval: 5s
      timeout: 60s
      retries: 30
    volumes:
      - ai-cockpit-db:/var/lib/postgresql/data
    expose:
      # Opens port 3306 on the container
      - '3306'
    networks:
      - backend
    restart: unless-stopped
      
  ai-cockpit:
    image: ai-cockpit:latest
    depends_on:
      ai-cockpit-db:
        condition: service_healthy
    restart: on-failure
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ai-cockpit:5432/ai-cockpit?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: ai-cockpit
      SPRING_DATASOURCE_PASSWORD: ${DB_PW_ai-cockpit}
      KEYCLOAK_AUTH-SERVER-URL: https://${DOMAIN}/auth
      SERVER_USE_FORWARD_HEADERS: "true"
      SERVER_FORWARD_HEADERS_STRATEGY: FRAMEWORK
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend

volumes:
  ai-cockpit-db:

 # Networks to be created to facilitate communication between containers
networks:
  backend:

